# 朴素枚举

概述：尝试所有可能的集合，判断是否满足题目的要求。在找到解空间的同时要尽可能减少枚举的空间。

解空间：通过建立直接/间接的数学模型，抽象出可能的情况和需要枚举的要素.

eg.求所有的质数，此时所有正整数就可以看作一个解空间.

减少枚举的空间：

**• 很多时候并不是所有内容都需要枚举。**

eg.求所有的质数，2以外的偶数显然不满足条件，只需要枚举正整数中的奇数。

**• 恰当的枚举顺序可以减少枚举次数。**

eg.求最大的满足条件的数，从大到小找到符合题意的数据就可以终止枚举，从小到大枚举就必须枚举完所有的解空间。

## Next Number
### Description
You are playing a game with Little Q. In this game, two players take turns reporting the smallest positive integer y such that: 

	• y is not a multiple of 7. 
  
	• Digit 7 never occurs in the decimal representation of y. 
  
	• y > x, where x is the last integer reported by the opponent. 
  
	The player with the wrong answer will be punished. Now Little Q reports x correctly, try to write a program to find the answer! 
### Input 
	The first line contains a single integer T (1 ≤ T ≤ 100), the number of test cases. For each test case: The only line contains an integers x (1 ≤ x ≤ 100), denoting the last integer reported by Little Q. It is guaranteed that x is not a multiple of 7, and digit 7 never occurs in the decimal representation of x. 
### Output 
	For each test case, output a single line containing an integer y, the answer from you.
### Example Input
```
5
2
6
12
13
69
```
### Example Output
```
3
8
13
15
80
```
### 题意
求一个最小的y，满足：

• 比x大

• 不是7的倍数

• 十进制表示中不含7

### 解法
考虑解空间：大于X的整数

考虑枚举顺序：从X+1向上枚举

判断：是否含7，是否是7的倍数
# 前缀和与差分
## 前缀和
概述：一种预处理算法，对于原数组A，建立前缀和数组S，有$S[i]=\sum_{j=1}^{i}A[j]$，可以做到在O(1)时间内完成对区间和的查询。

例：给定一个有N个整数的数列{an}（1≤n≤1e5），有q（1≤q≤1e5）次询问，每次询问数列的第L个元素到第R个元素的和。(a[i]<=1e5)

朴素做法：模拟，对于每次询问从L循环到R，累加输出结果，时间复杂度为O（Nq）

前缀和做法：建立前缀和数组，对于每次询问有：$sum(l,r)=S[R]-S[L-1]$

## 差分
概述：一种预处理算法，对于原数组A，建立差分数组D，有D[1]=A[1],$D[i]=A[i]-A[i-1](2\leq i\leq N)$，可以做到在O(1)时间内完成对区间的修改。

例：
给定一个有N个元素的数列{an}（1≤n≤100000），有q（1≤q≤100000）次修改，每次把数列中的第L到第R的每个元素都加上一个值k，求所有的修改之后每个数的值。

朴素做法：每次修改从L循环到R，时间复杂度为O（Nq）

差分做法：建立差分数组，对于每次修改有$D[L]+=k,D[R+1]-=k$

### Tallest Cow
#### Description

FJ's N (1 ≤ N ≤ 10,000) cows conveniently indexed 1..N are standing in a line. Each cow has a positive integer height (which is a bit of secret). You are told only the height H (1 ≤ H ≤ 1,000,000) of the tallest cow along with the index I of that cow.

FJ has made a list of R (0 ≤ R ≤ 10,000) lines of the form "cow 17 sees cow 34". This means that cow 34 is at least as tall as cow 17, and that every cow between 17 and 34 has a height that is strictly smaller than that of cow 17.

For each cow from 1..N, determine its maximum possible height, such that all of the information given is still correct. It is guaranteed that it is possible to satisfy all the constraints.
#### Input

Line 1: Four space-separated integers: N, I, H and R
Lines 2..R+1: Two distinct space-separated integers A and B (1 ≤ A, B ≤ N), indicating that cow A can see cow B.
#### Output

Lines 1..N: Line i contains the maximum possible height of cow i.
#### Sample Input
```
9 3 5 5
1 3
5 3
4 3
3 7
9 8
```
#### Sample Output
```
5
4
5
3
4
4
5
5
5
```
#### 题意
n头牛站一排，两头牛能够看见的条件是他们之间的牛都比他们小，已知最高的第p头牛的高度是H，求每头牛的最大高度可能是多少？
#### 解法
考虑仅已知最高的牛的身高，要求所有的牛的身高，所以需要建立一个相对关系。

用H数组描述他们的相对关系，初始化$H[i]=0(1\leq i \leq N)$

考虑题目给出的M对关系，每存在一对关系A能看见B，说明A和B中间的每头牛都比它们至少矮1，由于求每头牛的最大可能高度，所以假定这之间每头牛都是矮1，即$H[i]=H[i]-1 (A < i < B)

对于修改H数组的过程：

朴素做法，时间复杂度O（NM）

采用差分，时间复杂度O（N+M）

## 多维前缀和
概述：多维前缀和的求解基本是基于容斥原理

以二维前缀和为例，原数组为a[n][m]，定义前缀和数组为s[n][m]，其中
$\operatorname{sum}_{i, j}=\sum_{x=1}^{i} \sum_{y=1}^{j} a[x][y]$

初始化过程如图：


求以（x,y）为右上角，(p,q)为左下角的矩形内的和？




